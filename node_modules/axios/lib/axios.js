'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');

/**
 * 创建一个axios实例
 *
 * @param {Object} defaultConfig 默认配置
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {

  var context = new Axios(defaultConfig);
  
  // 包装产生一个函数 本质就是调用Axios.prototype.request
  
  var instance = bind(Axios.prototype.request, context);

  // 当前实例可以直接访问对应的属性 {request, geturi, 各种请求方法}
  utils.extend(instance, Axios.prototype, context);

  // 绑定this主要就是因为 我们实际上是在当前context上绑定了拦截器


  // 当前实例直接访问对应的属性 {config, interceptors}
  utils.extend(instance, context);

  // 绑定create方法
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// 导出默认实例
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');
axios.VERSION = require('./env/data').version;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;
